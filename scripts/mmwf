#!/usr/bin/env python
# coding: utf-8
# Copyright (c) MatMethods Development Team.

from __future__ import division, unicode_literals, print_function

import argparse
import os

import sys
from monty.serialization import loadfn
import yaml

from fireworks import LaunchPad
from matmethods import get_wf_from_spec_dict
from matmethods.vasp.vasp_powerups import add_namefile
from pymatgen import Structure, MPRester


default_yaml = """fireworks:
- fw: matmethods.vasp.fireworks.core.OptimizeFW
- fw: matmethods.vasp.fireworks.core.StaticFW
  params:
    parents: 0
- fw: matmethods.vasp.fireworks.core.NonSCFFW
  params:
    parents: 1
    mode: uniform
- fw: matmethods.vasp.fireworks.core.NonSCFFW
  params:
    parents: 1
    mode: line
common_params:
  db_file: None
"""

module_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)))


def add_to_lpad(workflow, write_namefile=False):
    """
    Add the workflow to the launchpad

    Args:
        workflow (Workflow): workflow for db insertion
        write_namefile (bool): If set an empty file with the name
            "FW--<fw.name>" will be written to the launch directory
    """
    lp = LaunchPad.auto_load()
    workflow = add_namefile(workflow) if write_namefile else workflow
    lp.add_wf(workflow)


def _get_wf(args, structure):
    if args.spec_file:
        spec_path = args.spec_file
        if args.library:
            if args.library.lower() == "vasp":
                spec_path = os.path.join(module_dir, "..", "matmethods",
                                         "vasp", "workflows", "base",
                                         "library", spec_path)
            else:
                raise ValueError("Unknown library: {}".format(args.library))
        d = loadfn(spec_path)
        return get_wf_from_spec_dict(structure, d)

    elif args.preset:
        if args.library:
            if args.library.lower() == "vasp":
                modname = "matmethods.vasp.workflows.presets.core"
                funcname = args.preset
            else:
                modname, funcname = args.preset.rsplit(".", 1)

        mod = __import__(modname, globals(), locals(), [str(funcname)], 0)
        func = getattr(mod, funcname)
        return func(structure)

    else:
        d = yaml.load(default_yaml)
        return get_wf_from_spec_dict(structure, d)


def add_wf(args):
    for f in args.files:
        if not args.mp:
            s = Structure.from_file(f)
        else:
            s = MPRester().get_structure_by_material_id(f)
        wf = _get_wf(args, s)
        add_to_lpad(wf, write_namefile=False)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="mmwf is a convenient script to add workflows using a "
                    "simple YAML spec.",
        epilog="Author: Shyue Ping Ong")

    subparsers = parser.add_subparsers()

    padd = subparsers.add_parser("add", help="Add workflows.")
    padd.add_argument("-l", "--library", dest="library", type=str,
                      help="If this option is set, the path to the spec file"
                           "is taken with respect to the MatMethods base library."
                           "Use 'vasp' for the VASP library of workflows")
    padd.add_argument("-s", "--spec",
                      dest="spec_file", type=str,
                      help="Specify workflow type using YAML/JSON spec file.")
    padd.add_argument("-p", "--preset",
                      dest="preset", type=str,
                      help="Specify workflow type using preset function")
    padd.add_argument("-m", "--mp", dest="mp", action='store_true',
                      help="If this option is set, the files argument is "
                           "interpreted as a list of Materials Project IDS. "
                           "Note that your MAPI_KEY environment variable must "
                           "be set to get structures from the Materials "
                           "Project.")
    padd.add_argument("files", metavar="files", type=str, nargs="+",
                      help="Structures to add workflows for.")
    padd.set_defaults(func=add_wf)

    args = parser.parse_args()

    try:
        a = getattr(args, "func")
    except AttributeError:
        parser.print_help()
        sys.exit(0)
    args.func(args)

